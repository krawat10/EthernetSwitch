@{
    ViewData["Title"] = "Home Page";
}
@model EthernetSwitch.ViewModels.IndexViewModel
<div class="text-center">
    <h1 class="display-4">Ethernet Switch</h1>
    <br/>
    @if (!string.IsNullOrWhiteSpace(Model.Error))
    {
        <div class="alert alert-danger" role="alert">
            @Model.Error
        </div>
    }
    <table class="table table-striped">
        <thead>
        <tr>
            <th> Name</th>
            <th> Status</th>
            <th> Private VLAN</th>
            <th> Tagged</th>
            <th> GVRP</th>
            <th> Virtual VLANs</th>
            <th> Neighbor (LLDP)</th>
            <th> Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var @interface in Model.Interfaces)
        {
            if (!@interface.Hidden)
            {
                <partial name="_InterfaceRow" model="@(@interface)"/>
            }
        }
        </tbody>
    </table>
</div>
<div>
    <h2>Bridges</h2>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>VLAN</th>
                <th>IP</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var vlan in Model.VLANs)
        {
            <tr>
                <td>
                    <form id="@vlan.Name" asp-action="EditBridge" asp-controller="Ethernet" asp-antiforgery="true" method="post">
                    </form>
                    @vlan.Name
                    <input form="@vlan.Name" type="hidden" name="Name" value="@vlan.Name" />
                </td>
                <td>
                    <input form="@vlan.Name" type="text" name="IpAddress" value="@vlan.IpAddress"/>
                    
                    @for (int i = 0; i < vlan.Interfaces.Length; i++)
                    {
                        @vlan.Interfaces[i]
                        <input form="@vlan.Name" type="hidden" name="Interfaces[@i]" value="@vlan.Interfaces[i]" />
                    }
                </td>
                <td>
                    <button form="@vlan.Name" class="btn btn-outline-secondary" type="submit">
                        <i class="fas fa-edit"></i>
                        Update
                    </button>
                </td>

            </tr>
        }
        </tbody>
    </table>
</div>

<div id="create-vlan-modal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create a new VLAN</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="vlan-input"></label>
                    <input type="number" class="form-control" min="0" max="4094" id="vlan-input" placeholder="Set VLAN name (number)">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button onclick="createVLAN(this)" type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        let current_interface_guid = '';

        $(document).ready(() => $('.interface-type').each((idx, el) => updateTaggedSwitch(el)));

        function createVLAN(e) {
            $('#create-vlan-modal').modal('hide');
            const vlan = $('#vlan-input').val();

            addVLAN(current_interface_guid, vlan);
            $(`.vlans-dropdown-options[data-interface=${current_interface_guid}]`)
                .each((idx, dropdown) => {
                    $(dropdown)
                        .prepend(`<a class="dropdown-item" onclick="addOtherVLAN(this)" data-interface="${$(dropdown)
                            .data('interface')}">${vlan}</a>`);

                });
        }


        function updateTaggedSwitch(e) {
            const select = $(e).first();
            const interface = select.data('interface');
            const selectedOptionValue = select.find('option:selected').val();

            const taggedSwitch = $(`#Tagged-${interface}`).first();

            if (taggedSwitch) {
                if (taggedSwitch.data('allowed')) {
                    if (selectedOptionValue > 0) {
                        taggedSwitch.prop('disabled', true);
                        taggedSwitch.prop('enabled', false);
                        taggedSwitch.removeAttr('checked');
                    } else {
                        taggedSwitch.prop('disabled', false);
                        taggedSwitch.prop('enabled', true);
                    }

                }
            }
        }

        function removeVLAN(e) {
            const vlan = e.dataset.vlan;
            const interface = e.dataset.interface;

            let input = $(`.vlan-inputs-${interface}`).find(`input[value=${vlan}]`);
            const span = $(e).parent();

            $(input).remove();
            $(span).remove();

            $('.vlans-dropdown-options')
                .each((idx, dropdown) => {
                    if ($(dropdown).data('interface') === interface) {
                        const option =
                            `<a class="dropdown-item" onclick="addOtherVLAN(this)" data-interface="${interface}">${vlan
                                }</a>\n`;
                        $(dropdown).prepend(option);
                    }
                });
        }

        function addOtherVLAN(e) {
            addVLAN(e.dataset.interface, e.text);
            $(e).remove();
        }

        function addVLAN(interface, vlan) {
            const interfaceVLANs = $(`.vlan-inputs-${interface}`);

            const el = `
                        <input form="${interface}" name="VirtualLANs" value="${vlan}" hidden/>
                            <span class="vlan-span badge badge-primary">
                            ${vlan}
                            <i
                                data-interface="${interface}"
                                data-vlan="${vlan}"
                                class="fas fa-minus"
                                data-toggle="tooltip"
                                data-placement="bottom"
                                title="remove VLAN"
                                onclick="removeVLAN(this)"
                            >
                            </i>
                        </span>`;

            interfaceVLANs.prepend(el);
        };

        function openNewVLANForm(e) {
            current_interface_guid = e.dataset.interface;
            $('#create-vlan-modal').modal('show');
        }
    </script>
}